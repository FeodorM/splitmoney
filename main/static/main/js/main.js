// Generated by CoffeeScript 1.10.0
(function() {
  var Button, Input, InputList, Output, OutputItem, br, button, center, csrfSafeMethod, csrftoken, div, form, getCookie, hr, input, label, ref, render, start,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  render = ReactDOM.render;

  ref = React.DOM, div = ref.div, button = ref.button, form = ref.form, input = ref.input, br = ref.br, label = ref.label, hr = ref.hr, center = ref.center;

  getCookie = function(name) {
    var cookie, cookieValue, cookies, i;
    cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      cookies = document.cookie.split(';');
      i = 0;
      while (i < cookies.length) {
        cookie = jQuery.trim(cookies[i]);
        if (cookie.substring(0, name.length + 1) === name + '=') {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
        i++;
      }
    }
    return cookieValue;
  };

  csrftoken = getCookie('csrftoken');

  csrfSafeMethod = function(method) {
    return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
  };

  $.ajaxSetup({
    beforeSend: function(xhr, settings) {
      if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
        return xhr.setRequestHeader('X-CSRFToken', csrftoken);
      }
    }
  });

  start = function() {
    return render(InputList({}), $('#main')[0]);
  };

  InputList = (function(superClass) {
    extend(InputList, superClass);

    function InputList(props) {
      this.createInput = bind(this.createInput, this);
      this.valueChanged = bind(this.valueChanged, this);
      this.handleSubmit = bind(this.handleSubmit, this);
      this.usersAreValid = bind(this.usersAreValid, this);
      this.isInt = bind(this.isInt, this);
      this.addInput = bind(this.addInput, this);
      InputList.__super__.constructor.call(this, props);
      this.state = {
        users: [
          {
            name: '',
            money: '',
            num: 0
          }
        ]
      };
    }

    InputList.prototype.addInput = function(e) {
      var newUsers, users;
      e.preventDefault();
      users = this.state.users;
      newUsers = users.concat([
        {
          name: '',
          money: '',
          num: users.length
        }
      ]);
      return this.setState({
        users: newUsers
      });
    };

    InputList.prototype.isInt = function(value) {
      if (parseFloat(value) === parseInt(value) && !isNaN(value)) {
        return true;
      } else {
        return false;
      }
    };

    InputList.prototype.usersAreValid = function(users) {
      var j, len, user;
      for (j = 0, len = users.length; j < len; j++) {
        user = users[j];
        if (!(user.name.length && this.isInt(user.money))) {
          return false;
        }
      }
      return true;
    };

    InputList.prototype.handleSubmit = function(e) {
      var users;
      e.preventDefault();
      users = this.state.users;
      if (!this.usersAreValid(users)) {
        return alert('Wrong Data.');
      } else {
        return $.ajax({
          url: '/ajax/',
          method: 'POST',
          dataType: 'json',
          data: {
            users: JSON.stringify(users)
          },
          success: function(data, textStatus, jqXHR) {
            return render(Output({
              data: data
            }), $('#main')[0]);
          },
          error: function(jqXHR, textStatus, errorThrown) {
            alert("Something went wrong!\nError: " + errorThrown);
            return console.log('Something went wrong!');
          }
        });
      }
    };

    InputList.prototype.valueChanged = function(value, name, num) {
      var users;
      users = this.state.users;
      users[num][name] = value;
      return this.setState({
        users: users
      });
    };

    InputList.prototype.createInput = function(user) {
      return Input({
        num: user.num,
        key: user.num,
        valueChanged: this.valueChanged
      });
    };

    InputList.prototype.render = function() {
      var inputs;
      inputs = this.state.users.map(this.createInput);
      return form({
        className: 'col-xs-12',
        onSubmit: this.handleSubmit
      }, inputs.concat([
        Button({
          text: '+',
          onClick: this.addInput,
          key: 'plus-button'
        }), br({
          key: 'br'
        }), Button({
          text: 'Split Money',
          type: 'submit',
          key: 'submit-button'
        })
      ]));
    };

    return InputList;

  })(React.Component);

  InputList = React.createFactory(InputList);

  Input = (function(superClass) {
    extend(Input, superClass);

    function Input(props) {
      this.handleMoneyChange = bind(this.handleMoneyChange, this);
      this.handleNameChange = bind(this.handleNameChange, this);
      Input.__super__.constructor.call(this, props);
      this.state = {
        name: '',
        money: ''
      };
    }

    Input.prototype.handleNameChange = function(e) {
      var value;
      value = e.target.value;
      this.props.valueChanged(value, 'name', this.props.num);
      return this.setState({
        name: value
      });
    };

    Input.prototype.handleMoneyChange = function(e) {
      var value;
      value = e.target.value;
      this.props.valueChanged(value, 'money', this.props.num);
      return this.setState({
        money: value
      });
    };

    Input.prototype.render = function() {
      return div({
        className: 'col-xs-12'
      }, [
        div({
          className: 'form-group',
          key: 'name-div'
        }, [
          label({
            htmlFor: "input-name" + this.props.num,
            key: 'label'
          }, 'Name'), input({
            id: "input-name" + this.props.num,
            className: 'form-control',
            key: 'input',
            type: 'text',
            placeholder: 'Ivan Ivanov',
            value: this.state.name,
            onChange: this.handleNameChange
          })
        ]), div({
          className: 'form-group',
          key: 'amount-div'
        }, [
          label({
            htmlFor: "input-amount" + this.props.num,
            key: 'label'
          }, 'Amount'), input({
            id: "input-amount" + this.props.num,
            className: 'form-control',
            key: 'input',
            type: 'text',
            placeholder: '1488',
            value: this.state.money,
            onChange: this.handleMoneyChange
          })
        ]), hr({
          key: 'hr'
        })
      ]);
    };

    return Input;

  })(React.Component);

  Input = React.createFactory(Input);

  Button = (function(superClass) {
    extend(Button, superClass);

    function Button() {
      return Button.__super__.constructor.apply(this, arguments);
    }

    Button.prototype.render = function() {
      var ref1, ref2;
      return div({
        className: 'col-xs-12 text-center'
      }, [
        button({
          key: 'button',
          className: 'btn btn-default',
          type: (ref1 = this.props.type) != null ? ref1 : 'button',
          onClick: (ref2 = this.props.onClick) != null ? ref2 : function() {}
        }, this.props.text)
      ]);
    };

    return Button;

  })(React.Component);

  Button = React.createFactory(Button);

  Output = (function(superClass) {
    extend(Output, superClass);

    function Output() {
      return Output.__super__.constructor.apply(this, arguments);
    }

    Output.prototype.prettify = function(user) {
      var toPay, whatToDo;
      toPay = parseInt(user.to_pay);
      whatToDo = toPay > 0 ? "-> " + toPay : toPay === 0 ? "owes nothing" : "<- " + (Math.abs(toPay));
      return OutputItem({
        text: user.name + " " + whatToDo,
        key: user.name
      });
    };

    Output.prototype.render = function() {
      return div({
        className: 'list-group'
      }, this.props.data.map(this.prettify).concat([
        Button({
          onClick: start,
          text: 'Start Again',
          key: 'btn'
        })
      ]));
    };

    return Output;

  })(React.Component);

  Output = React.createFactory(Output);

  OutputItem = (function(superClass) {
    extend(OutputItem, superClass);

    function OutputItem() {
      return OutputItem.__super__.constructor.apply(this, arguments);
    }

    OutputItem.prototype.render = function() {
      return div({
        className: 'list-group-item'
      }, this.props.text);
    };

    return OutputItem;

  })(React.Component);

  OutputItem = React.createFactory(OutputItem);

  render(Button({
    onClick: start,
    text: 'Start'
  }), $('#main')[0]);

}).call(this);
