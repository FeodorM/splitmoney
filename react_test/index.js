// Generated by CoffeeScript 1.10.0
(function() {
  var Comment, CommentBox, CommentForm, CommentList, Photo, PhotoGallery, button, createView, dataPhotos, div, form, h1, h2, h3, i, img, input, pictures, ref, render, span, texts,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  createView = function(spec) {
    return React.createFactory(React.createClass(spec));
  };

  render = ReactDOM.render;

  ref = React.DOM, div = ref.div, img = ref.img, h1 = ref.h1, h2 = ref.h2, h3 = ref.h3, span = ref.span, button = ref.button, form = ref.form, input = ref.input;

  pictures = ['pictures/avacyn.jpg', 'pictures/karn.jpg', 'pictures/jace.jpg', 'pictures/jace1.jpg', 'pictures/chandra.jpg'];

  texts = ['Avacyn', 'Karn', 'Jace', 'Jace, the living guildpack', 'Chandra'];

  Photo = (function(superClass) {
    extend(Photo, superClass);

    function Photo(props) {
      this.toggleLiked = bind(this.toggleLiked, this);
      Photo.__super__.constructor.call(this, props);
      this.state = {
        liked: false
      };
    }

    Photo.prototype.toggleLiked = function() {
      return this.setState({
        liked: !this.state.liked
      });
    };

    Photo.prototype.render = function() {
      var buttonClass;
      buttonClass = this.state.liked ? 'active' : '';
      return div({
        className: 'photo'
      }, [
        img({
          src: this.props.src
        }), div({
          className: 'bar'
        }, [
          button({
            onClick: this.toggleLiked,
            className: buttonClass
          }, 'â™¥'), span({}, this.props.caption)
        ])
      ]);
    };

    return Photo;

  })(React.Component);

  Photo = React.createFactory(Photo);

  PhotoGallery = (function(superClass) {
    extend(PhotoGallery, superClass);

    function PhotoGallery() {
      return PhotoGallery.__super__.constructor.apply(this, arguments);
    }

    PhotoGallery.prototype.render = function() {
      var photos;
      photos = this.props.photos.map(function(photo) {
        return Photo({
          src: photo.url,
          caption: photo.caption,
          key: photo.id
        });
      });
      return div({
        className: 'photo-gallery'
      }, photos);
    };

    return PhotoGallery;

  })(React.Component);

  PhotoGallery = React.createFactory(PhotoGallery);

  Comment = (function(superClass) {
    extend(Comment, superClass);

    function Comment() {
      return Comment.__super__.constructor.apply(this, arguments);
    }

    Comment.prototype.render = function() {
      return div({
        className: 'comment'
      }, [
        h2({
          className: 'commentAuthor'
        }, this.props.author), this.props.children
      ]);
    };

    return Comment;

  })(React.Component);

  Comment = React.createFactory(Comment);

  CommentList = (function(superClass) {
    extend(CommentList, superClass);

    function CommentList() {
      return CommentList.__super__.constructor.apply(this, arguments);
    }

    CommentList.prototype.render = function() {
      var commentNodes;
      commentNodes = this.props.data.map(function(comment) {
        return Comment({
          author: comment.author,
          key: comment.id
        }, comment.text);
      });
      return div({
        className: 'commentList'
      }, commentNodes);
    };

    return CommentList;

  })(React.Component);

  CommentList = React.createFactory(CommentList);

  CommentForm = (function(superClass) {
    extend(CommentForm, superClass);

    function CommentForm(props) {
      this.handleSubmit = bind(this.handleSubmit, this);
      this.handleTextChange = bind(this.handleTextChange, this);
      this.handleAuthorChange = bind(this.handleAuthorChange, this);
      CommentForm.__super__.constructor.call(this, props);
      this.state = {
        author: '',
        text: ''
      };
    }

    CommentForm.prototype.handleAuthorChange = function(e) {
      return this.setState({
        author: e.target.value
      });
    };

    CommentForm.prototype.handleTextChange = function(e) {
      return this.setState({
        text: e.target.value
      });
    };

    CommentForm.prototype.handleSubmit = function(e) {
      var author, text;
      e.preventDefault();
      author = this.state.author.trim();
      text = this.state.text.trim();
      if (!text || !author) {
        return;
      }
      this.props.onCommentSubmit({
        author: author,
        text: text
      });
      return this.setState({
        author: '',
        text: ''
      });
    };

    CommentForm.prototype.render = function() {
      return form({
        className: 'commentForm',
        onSubmit: this.handleSubmit
      }, [
        input({
          type: 'text',
          placeholder: 'Your name',
          value: this.state.author,
          onChange: this.handleAuthorChange
        }), input({
          type: 'text',
          placeholder: 'Say something',
          value: this.state.text,
          onChange: this.handleTextChange
        }), input({
          type: 'submit',
          value: 'Post'
        })
      ]);
    };

    return CommentForm;

  })(React.Component);

  CommentForm = React.createFactory(CommentForm);

  CommentBox = (function(superClass) {
    extend(CommentBox, superClass);

    function CommentBox(props) {
      this.handleCommentSubmit = bind(this.handleCommentSubmit, this);
      CommentBox.__super__.constructor.call(this, props);
      this.state = {
        data: []
      };
    }

    CommentBox.prototype.handleCommentSubmit = function(comment) {
      var comments, newComments;
      comments = this.state.data;
      comment.id = Date.now();
      newComments = comments.concat([comment]);
      return this.setState({
        data: newComments
      });
    };

    CommentBox.prototype.render = function() {
      return div({
        className: 'commentBox'
      }, [
        h1({}, 'Comments'), CommentList({
          data: this.state.data
        }), CommentForm({
          onCommentSubmit: this.handleCommentSubmit
        })
      ]);
    };

    return CommentBox;

  })(React.Component);

  CommentBox = React.createFactory(CommentBox);

  dataPhotos = (function() {
    var j, ref1, results;
    results = [];
    for (i = j = 0, ref1 = pictures.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
      results.push({
        id: i + 100,
        url: pictures[i],
        caption: texts[i]
      });
    }
    return results;
  })();

  render(CommentBox({}), $('#comment')[0]);

  render(PhotoGallery({
    photos: dataPhotos
  }), $('#gallery')[0]);

}).call(this);
